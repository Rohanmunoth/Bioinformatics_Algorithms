def linearMassScore(g,spectrum):
    theoreticalSpectrum= circular(g)
    experimentalSpectrum = change(spectrum)
    #print(theoreticalSpectrum)
    #print(experimentalSpectrum)
    count=0
    for i in theoreticalSpectrum:
        for j in experimentalSpectrum:
            if (i==j):
                count+=1
                experimentalSpectrum.remove(j)
                break
    return count


def change(spectrum):
    spectrum=spectrum+' '
    newSpectrum =[]
    m=''
    for i in spectrum: 
        if (i==' '):
            newSpectrum.append(int(m))
            m=''
        else:
            m+=i
    return newSpectrum

def circular(g):
    final=[]
    c=1
    scores=[]
    for i in range (len(g)):
        for j in range (len(g)):
            if (j+c<len(g)+1):
                m=g[j:j+c]
                if (len(m)!=len(g)):
                    final.append(m)
        c+=1
    (final.append(g))
    print(final)
    for i in final:
        scores.append(score(i))
    scores=[0]+scores
    scores=sorted(scores)
    print(scores)
    return scores

def score(string):
    scores=0
    mass_values={'G':57,'A':71,'S':87,'P':97,'V':99,'T':101,'C':103,'I':113,'L':113,'N':114,'D':115,'K':128,'Q':128,'E':129,'M':131,'H':137,'F':147,'R':156,'Y': 163,'W': 186}
    for i in string:
        scores+=mass_values[i]
    return scores

#m='''0 57 71 71 71 87 97 97 99 99 99 99 101 103 103 113 113 113 113 113 114 114 115 115 115 128 128 128 128 129 147 147 147 156 156 163 163 170 184 185 185 186 186 186 186 186 196 198 198 199 200 211 212 212 213 217 218 227 234 241 241 243 243 248 250 250 250 256 275 276 283 283 283 284 284 285 285 285 289 298 299 299 299 301 309 310 310 312 314 319 328 340 341 342 345 349 351 356 363 364 365 369 378 380 384 384 384 390 390 397 397 397 397 398 398 411 411 412 412 413 413 423 429 432 436 439 443 447 448 452 461 466 468 470 484 485 489 491 492 493 494 496 497 499 505 508 510 510 518 525 525 526 526 526 526 531 537 541 542 560 560 563 565 567 570 583 584 589 595 597 597 598 599 606 607 608 617 622 624 627 629 631 633 634 634 638 638 639 639 646 652 654 659 673 679 681 682 683 683 688 688 696 696 697 700 704 712 721 725 726 730 730 736 739 740 744 746 749 749 753 753 755 767 774 780 782 783 792 794 795 796 797 801 801 801 803 809 811 820 824 827 835 844 845 849 850 851 852 856 864 867 869 872 872 877 882 882 882 883 887 889 900 910 915 916 916 923 929 935 937 938 938 939 948 953 957 964 964 974 980 980 980 981 981 982 983 984 987 990 990 992 995 996 997 1000 1019 1028 1030 1036 1038 1051 1051 1057 1063 1063 1067 1068 1077 1080 1081 1085 1093 1094 1095 1095 1096 1097 1098 1105 1108 1111 1115 1123 1133 1137 1137 1139 1143 1143 1150 1160 1164 1165 1166 1167 1172 1176 1179 1192 1193 1194 1196 1213 1214 1214 1214 1222 1223 1224 1226 1240 1246 1247 1254 1256 1263 1263 1266 1266 1267 1267 1274 1279 1280 1281 1284 1292 1293 1294 1321 1321 1327 1328 1329 1339 1342 1355 1360 1361 1361 1364 1377 1378 1378 1379 1380 1381 1382 1382 1387 1391 1393 1407 1409 1413 1422 1426 1426 1432 1442 1442 1457 1464 1474 1477 1478 1479 1479 1480 1488 1489 1494 1495 1495 1502 1506 1506 1507 1510 1513 1516 1524 1541 1545 1550 1569 1573 1577 1577 1579 1582 1589 1591 1593 1594 1602 1603 1604 1607 1611 1612 1623 1623 1626 1628 1631 1640 1652 1663 1664 1665 1672 1678 1680 1690 1692 1692 1702 1705 1710 1711 1717 1722 1724 1727 1729 1731 1736 1736 1739 1745 1754 1767 1777 1777 1779 1787 1789 1789 1791 1793 1793 1820 1823 1825 1826 1826 1830 1835 1844 1852 1852 1854 1857 1858 1865 1873 1878 1886 1890 1890 1892 1892 1897 1903 1906 1907 1915 1922 1928 1929 1938 1963 1967 1967 1972 1977 1979 1980 1986 1987 1993 2000 2006 2012 2020 2020 2020 2021 2021 2037 2041 2043 2043 2076 2076 2076 2078 2078 2078 2085 2095 2095 2101 2103 2107 2114 2115 2133 2133 2134 2140 2149 2153 2156 2156 2175 2177 2177 2191 2204 2206 2206 2210 2220 2227 2232 2234 2237 2248 2250 2255 2262 2262 2262 2270 2274 2277 2281 2303 2305 2319 2319 2326 2351 2351 2351 2352 2361 2361 2362 2362 2363 2377 2378 2383 2390 2396 2406 2417 2418 2423 2432 2432 2433 2454 2460 2460 2466 2475 2476 2479 2489 2490 2493 2498 2505 2517 2519 2530 2537 2546 2546 2561 2569 2569 2574 2575 2586 2588 2594 2601 2603 2604 2618 2626 2640 2645 2645 2646 2659 2674 2674 2682 2700 2702 2702 2703 2705 2716 2716 2717 2729 2741 2742 2759 2761 2773 2773 2773 2787 2787 2803 2804 2815 2816 2829 2844 2844 2844 2845 2856 2868 2870 2872 2886 2886 2887 2889 2903 2915 2950 2957 2958 2958 2959 2959 2967 2983 2984 2985 3000 3001 3002 3015 3030 3056 3058 3066 3071 3071 3078 3082 3087 3089 3097 3106 3114 3114 3144 3153 3170 3171 3184 3186 3193 3196 3200 3213 3234 3234 3243 3252 3257 3267 3267 3283 3299 3299 3300 3342 3347 3349 3357 3362 3370 3370 3370 3380 3381 3399 3399 3446 3456 3469 3475 3477 3483 3484 3485 3494 3498 3517 3528 3555 3556 3566 3574 3582 3584 3590 3597 3631 3645 3655 3669 3679 3680 3683 3684 3689 3741 3744 3754 3759 3760 3768 3768 3783 3793 3865 3867 3867 3869 3872 3874 3896 3930 3940 3964 3966 3979 3987 4043 4053 4058 4063 4078 4082 4152 4171 4173 4177 4181 4229 4249 4280 4286 4328 4357 4363 4427 4456 4466 4472 4555 4571 4613 4670 4741 4856'''
print(linearMassScore('NEQL', '0 99 113 114 128 227 257 299 355 356 370 371 484'))